%%
% loads windows, window_size, pose_window_width, and force_window_width
% windows contains the pre and post condition data, and has the following form:
%      time_sec, time_nsec, image_id, poses, ..., forces, ..., next_action_id
% next_action_id is the integer ID of the next action taken. The integer IDs are 
% from annotation_mapping.txt (starting at 1)
%%

load('/home/mark/Desktop/perceptual_causality_test/approach_windows.mat')
load('/home/mark/Desktop/perceptual_causality_test/8_bottle64_open_palm_tf_convert_merged_successes_proc_all_correct.csv_tf_order.mat')

poses = windows(:, 4:4+pose_window_width-1)
forces = windows(:, 4+pose_window_width:4+pose_window_width+force_window_width-1);

% lookup where the index of the where our desired tf starts in the pose matrix
wrist_bottle_idx = tf_offset_lookup('vicon/wrist/wrist', 'vicon/bottle64/bottle64', tfs);
pose_len = 7;

wrist_bottle_prewindows = poses(1:window_size*2:size(poses,1),(wrist_bottle_idx-1)*7+1:wrist_bottle_idx*7)
wrist_bottle_postwindows = poses(2:window_size*2:size(poses,1),(wrist_bottle_idx-1)*7+1:wrist_bottle_idx*7)

x_pre = wrist_bottle_prewindows(:,1);
y_pre = wrist_bottle_prewindows(:,2);
z_pre = wrist_bottle_prewindows(:,3);
x_post = wrist_bottle_postwindows(:,1);
y_post = wrist_bottle_postwindows(:,2);
z_post = wrist_bottle_postwindows(:,3);

% compute the relative distance between the wrist and the bottle
rel_dist_pre = sqrt(x_pre.^2 + y_pre.^2 + z_pre.^2);
rel_dist_post = sqrt(x_post.^2 + y_post.^2 + z_post.^2);

edges = linspace(min(min(rel_dist_pre), min(rel_dist_post)), max(max(rel_dist_pre), max(rel_dist_post)), 101);
figure();
hold on;
h_pre = histogram(rel_dist_pre, edges);
h_post = histogram(rel_dist_post, edges);
pre_counts = h_pre.Values;
post_counts = h_post.Values;
hold off;

% compute distributions
eps_ = 0.0001
pre_pd = (pre_counts - min(pre_counts)) / (max(pre_counts) - min(pre_counts));
post_pd = (post_counts - min(post_counts)) / (max(post_counts) - min(post_counts));
pre_pd(find(pre_pd == 0)) = eps_;
post_pd(find(post_pd == 0)) = eps_;

% kl_div = KLDiv(pre_dist, post_dist);
kl_div = sum(pre_pd .* (log2(pre_pd) - log2(post_pd)));